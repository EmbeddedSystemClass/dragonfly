// Declaration of protobuffer messages supported by the Dragonfly
// Flight Control Board (FCB) Command Line Interface (CLI)

syntax = "proto2";

// Receiver signal values normalized to [-32768, 32767]
message ReceiverSignalValuesProto {
	optional bool is_active = 1;
	optional int32 throttle = 2;
	optional int32 aileron = 3;
	optional int32 elevator = 4;
	optional int32 rudder = 5;
	optional int32 gear = 6;
	optional int32 aux1 = 7;
}

// Motor signal values normalized to [0, 65535]
message MotorSignalValuesProto {
	optional uint32 M1 = 1;
	optional uint32 M2 = 2;
	optional uint32 M3 = 3;
	optional uint32 M4 = 4;
}

// Sensor sample values
message SensorSamplesProto {
	optional float gyroX = 1;
	optional float gyroY = 2;
	optional float gyroZ = 3;
	optional float accX = 4;
	optional float accY = 5;
	optional float accZ = 6;
	optional float accRoll = 7;
	optional float accPitch = 8;
	optional float accYaw = 9;
	optional float magX = 10;
	optional float magY = 11;
	optional float magZ = 12;
}

// Actual flight states as estimated by the on-board Kalman and/or sensor fusion algorithms
message FlightStatesProto {
	optional float posX = 1; // World state coordinates [m]
	optional float posY = 2;
	optional float posZ = 3;
	optional float velX = 4;
	optional float velY = 5;
	optional float velZ = 6;
	optional float rollAngle = 7; // [rad]
	optional float pitchAngle = 8;
	optional float yawAngle = 9;
	optional float rollRate = 10; // [rad/s]
	optional float pitchRate = 11;
	optional float yawRate = 12;
}

// Sets the PID control parameters used by the Flight Control Board control algorithms
message PIDControlParamsProto {
	optional float K_vxy = 1;
	optional float Ti_vxy = 2;
	optional float Td_vxy = 3;
	optional float K_vz = 4;
	optional float Ti_vz = 5;
	optional float Td_vz = 6;
	optional float K_rollpitch = 7;
	optional float Ti_rollpitch = 8;
	optional float Td_rollpitch = 9;
	optional float K_yaw = 10;
	optional float Ti_yaw = 11;
	optional float Td_yaw = 12;
}

// Contains current control reference signal values
message ControlReferenceSignalsProto {
	optional float refPosX = 1;
	optional float refPosY = 2;
	optional float refPosZ = 3;
	optional float refVelX = 4;
	optional float refVelY = 5;
	optional float refVelZ = 6;
	optional float refRoll = 7;
	optional float refPitch = 8;
	optional float refYaw = 9;
	optional float refRollRate = 10;
	optional float refPitchRate = 11;	
	optional float refYawRate = 12;
}

// Contains current control signal values
message ControlSignalsProto {
	optional uint32 ctrlState = 1; // e.g. enum value for "Manual", "PID", "Idle" etc.
	optional float thrustCtrl = 2;
	optional float rollCtrl = 3;
	optional float pitchCtrl = 4;
	optional float yawCtrl = 5;
}

// Simulated states supposed to be sent from simulator to Flight Control Board and used to drive the control algorithms
message SimulatedStatesProto {
	optional float posX = 1; // World frame coordinates [m]
	optional float posY = 2;
	optional float posZ = 3;
	optional float velX = 4;
	optional float velY = 5;
	optional float velZ = 6;
	optional float angRoll = 7; // [rad]
	optional float angPitch = 8;
	optional float angYaw = 9;
	optional float rateRoll = 10; // [rad/s]
	optional float ratePitch = 11;
	optional float rateYaw = 12;
}